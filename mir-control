#!/usr/bin/perl

use 5.024;

use FindBin qw($Bin);
use Linux::Cpuinfo;
use JSON::XS;


use experimental 'smartmatch';

my $cmd = $ARGV[0] || 'help';
$cmd =~ s/\W//g;

my $routes = [
	[[qw/setup/],     		\&setup],
    [[qw/u up update/],     \&update],
    [[qw/p pack-static/],	\&pack],
    [[qw/w www/],           \&www],
    [[qw/ws www-stop/],     \&www_stop],
    [[qw/n nginx/],         \&ningx],
    [[qw/start/],           \&start],
    [[qw/stop/],            \&stop],
    [[qw/h help/],          \&help],
];

(map {$_->[1]->()} grep {$cmd ~~ $_->[0]} @$routes) or help();
exit();


sub help {
    say "Usage:";
    say "\tmir-control setup               Start to setup mir backend-node";
    say "\tmir-control update | up | u     Git pull \& Reload www-server (backend)";
    say "\tmir-control pack | p            Pack static (JS & CSS)";
    say "\tmir-control www | w             Start, or reload www-server (backend, kill HUP for reload)";
    say "\tmir-control www-stop | ws       Stoping www-server (backend, kill INT)";
    say "\tmir-control nginx | n           Start nginx";
    say "\tmir-control start               Starting nginx && backend";
    say "\tmir-control stop                Stopping nginx && backend";
    say "\tmir-control help | h            Show this help";
}

sub setup {
	my $get_linux_distibution = sub  {
		print "Choose Linux Distribution [Ubuntu/Debian=D, ArchLinux=A]? ";
		my $d = <STDIN>;
		chomp $d;
		return $d;
	};
	
	my $distro = $get_linux_distibution->();
	$distro = $get_linux_distibution->() while not (uc ($distro) ~~ [qw/D A/]);
	
	if ($distro eq 'D') { 
		# Setup for Debian / Ubuntu
		`sudo apt install cpanminus make build-essential`;
	} else {
		# Setup for ArchLinux
		`sudo pacman -S cpanminus make base-devel`;
	}
	
	`sudo cpanm AnyEvent EV AnyEvent::HTTPD Linux::Cpuinfo JSON::XS`;

	`cd nginx/nginx-1.22.0-src && ./configure --prefix=$Bin/nginx`;
	`cd nginx/nginx-1.22.0-src && make && make install && make clean`;
	`cp nginx/nginx.conf nginx/conf/nginx.conf`;
	
	my $ncpu = Linux::Cpuinfo->new->num_cpus;
	
	my $ncpu_input = 0;
	my $get_cpu_nums = sub {
		print "Set number of CPU cores [$ncpu]? ";
		my $ncpu_input = <STDIN>;
		chomp $ncpu_input;
		return $ncpu_input;
	};
	
	$ncpu_input = $get_cpu_nums->();
	$ncpu_input = $get_cpu_nums->() while ($ncpu =~ /\D/ || $ncpu < 1 || $ncpu > 100);
	$ncpu_input ||= $ncpu;
	$ncpu = $ncpu_input;
	

	my $start_port = 8000;
	open my $fh, '>nginx/conf/mir-backend-upstream.conf';
	for (1..$ncpu) {
		my $port = $start_port + $_ - 1;
		say $fh "server 127.0.0.1:$port;"
	}
	close $fh;
	
	`perl -i -pe 's/worker_processes\s+\d+/worker_processes $ncpu/' nginx/conf/nginx.conf`;
	
	
	my $config_text = encode_json({
		ncpus => $ncpu,
	});
	
	open $fh, '>mir.config';
	print $fh $config_text;
	close $fh;
		
	return 1;
}

sub update {
    ex('git pull');
    ex('./mir-control www');
}

sub pack {
    ex('cat public/css/bootstrap.min.css public/css/style.css public/css/player.css public/css/fontawesome/all.css > public/css/yahwe.css');
    ex('cat public/js/jquery-3.6.0.min.js public/js/popper.min.js public/js/bootstrap.bundle.min.js public/js/clipboard.js public/js/player.js > public/js/yahwe.js');
    ex('java  -jar etc/yuicompressor-2.4.8.jar public/css/yahwe.css  > public/css/yahwe.min.css');
    ex('uglifyjs public/js/yahwe.js > public/js/yahwe.min.js');
    ex('uglifyjs public/js/lightbox-plus-jquery.min.js public/js/masonry.pkgd.min.js public/js/imagesloaded.pkgd.min.js > public/js/yahwe-photos.min.js');
}


sub get_www_pid {
	my $pid = -e './pids/mir.pid' ? `cat ./pids/mir.pid` : undef;
	chomp $pid;
	return $pid;
}

sub www_start {
	ex('./scripts/mir');
}

sub www {
	my $pid = get_www_pid();
	
	if ($pid && kill (0, $pid)) {
		say "Reloading www-backend (gracefull), kill HUP $pid";
		ex('cat ./pids/mir.pid | xargs kill -HUP');
		return 1;
	}
	say "Starting www-backend (node)";
	www_start;
}

sub www_stop {
	my $pid = get_www_pid();
	say "Stoppping www-backend (node)";
	return say "Backend is not was be runned" if ((!$pid) || (!kill (0, $pid)));
	say "Stopping www-backend (node), kill INT $pid";
    kill INT => $pid;
}

sub get_nginx_pid {
	return unless -f 'nginx/logs/nginx.pid';
	my $pid = `cat nginx/logs/nginx.pid`;
	chomp $pid;
	return $pid;
}

sub nginx {
	say "Starting nginx";
	my $pid = get_nginx_pid;
	if ($pid && kill 0, $pid) {	
		warn "nginx alredy running";
	} else {
		ex ('nginx/sbin/nginx');
	}
	return 1;
}

sub nginx_stop {
	say "Stopping nginx...";
	my $pid = get_nginx_pid;
	if ($pid && kill 0, $pid) {
		kill TERM => $pid;
	} else {
		warn "nginx not was be runned";
	}
	return 1;
}

sub start {
	say "Starting mir...";
	www;
	nginx;
}

sub stop {
	say "Stopping mir...";
	www_stop;
	nginx_stop;
}

sub ex {
    my $cmd = shift;
    my $out = `$cmd`;
    chomp $out;
    say $out if $out;
    return 1;
}

1;


